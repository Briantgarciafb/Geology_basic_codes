import pysheds
from pysheds.grid import Grid
import rasterio
import fiona
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import colors
import numpy as np

Dir = 'D:/Curso/DEMD.tif' #Ingresa directorio de raster
Dir_guardar = r'D:/Curso/drenajes.shp' #Ingresa el directorio donde se guardar치 el shape

"Valores promedio para DEM de drone / resoluci칩n menor a 20 cm/px"
Area = 2000000 #Con este valor genera drenajes en un area de 800*550 m
Densidad = 15000 #Con este valor se pueden ver rios principales y tributarios en el area. A menor valor m치s densidad

with rasterio.open(Dir) as src:
    dem = src.read(1)
    
# Crea un objeto "grid" a partir de tu raster
grid = Grid.from_raster(Dir, data_dem='dem')
dem=grid.read_raster(Dir, data_dem='dem')

dirmap = (64,  128,  1,   2,    4,   8,    16,  32)

xm = xmax=src.bounds.right
ym = ymax=src.bounds.top

x, y = xm, ym

pit_filled_dem = grid.fill_pits(dem)

# Fill depressions in DEM
flooded_dem = grid.fill_depressions(pit_filled_dem)
    
# Resolve flats in DEM
inflated_dem = grid.resolve_flats(flooded_dem)

# Genera la direcci칩n de flujo para cada celda en el grid
fdir = grid.flowdir(inflated_dem, dirmap=dirmap)

acc = grid.accumulation(fdir, dirmap=dirmap)

x_snap, y_snap = grid.snap_to_mask(acc > Area, (x, y))

branches = grid.extract_river_network(fdir, acc > Densidad, dirmap=dirmap)

sns.set_palette('flare')
fig, ax = plt.subplots(figsize=(8.5,6.5))

plt.xlim(grid.bbox[0], grid.bbox[2])
plt.ylim(grid.bbox[1], grid.bbox[3])
ax.set_aspect('equal')

for branch in branches['features']:
    line = np.asarray(branch['geometry']['coordinates'])
    plt.plot(line[:, 0], line[:, 1])
    
_ = plt.title('Drenajes', size=14)

# Define the Shapefile schema
schema = {
    'geometry': 'LineString',
    'properties': {
        'id': 'int'
    },
}


# Open the Shapefile for writing
with fiona.open(Dir_guardar, 'w', 'ESRI Shapefile', schema) as dst:
    for i, branch in enumerate(branches['features']):
        line = branch['geometry']['coordinates']
        feature = {
            'geometry': {
                'type': 'LineString',
                'coordinates': line
            },
            'properties': {
                'id': i
            },
        }
        dst.write(feature)
